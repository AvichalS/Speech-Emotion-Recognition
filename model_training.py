# -*- coding: utf-8 -*-
"""Model Training.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zi63IUOlvJ3uOnBYpDTjKpxPIvUHd1FM

## Speech Emotion Recognition System

#### **Imports** :
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""#### **Loading the dataset** :"""

df = pd.read_csv('crema.csv')

df.head()

df.tail()

"""#### **Plotting the number of records for each emotion** :"""

sns.set(rc={'figure.figsize':(4,3)})
sns.countplot(x='emotion', data=df, palette='plasma');

"""#### **One hot encoding the level feature, for training model** :"""

df.level.unique()

df = pd.get_dummies(df, columns=['level'])

df.head()

df.tail()

df.shape

"""#### **Replacing Emotion feature by integer values, for model training** :"""

emotions = {'ANG':0, 'DIS':1, 'FEA':2, 'HAP':3, 'NEU':4, 'SAD':5}

df.emotion.replace(emotions, inplace = True)

"""#### **Handling Missing Values** :"""

import warnings 
warnings.filterwarnings('ignore')

df.fillna(df.mean(), inplace=True)

df.isna().sum().sum()

"""#### **Splitting the dataset into training and testing sets** :"""

df.drop(['sentence','actor'], axis=1, inplace=True)

from sklearn.model_selection import train_test_split
train, test = train_test_split(df, test_size=0.30)

train_x, train_y = train.drop('emotion', axis=1), train.emotion.values
test_x, test_y = test.drop('emotion', axis=1), test.emotion.values

"""#### **Scaling the dataset** :"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
train_x, test_x = sc.fit_transform(train_x), sc.fit_transform(test_x)

"""#### **Building a Deep Neural Network**:"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Activation,Dropout

model=Sequential()

model.add(Dense(100,input_shape=(164,)))
model.add(Activation('sigmoid'))

model.add(Dense(200))
model.add(Activation('sigmoid'))

model.add(Dense(100))
model.add(Activation('sigmoid'))
model.add(Dropout(0.5))

model.add(Dense(6))
model.add(Activation('sigmoid'))

"""#### **Compiling and Fitting the model to training data**:"""

model.compile(loss='sparse_categorical_crossentropy',metrics=['accuracy'],optimizer='adam')

model.fit(train_x, train_y, batch_size=100, epochs=60)

"""#### **Evaluating the model on testing set**:"""

model.evaluate(test_x, test_y, batch_size=20)

"""#### **Saving the trained model** :"""

import pickle
with open('speech_emotion_classifier.pkl','wb') as f:
    pickle.dump(model, f)

"""#### **Loading the model for classification** :"""

emotions = {'Angry':0, 'Disgust':1, 'Fear':2, 'Happy/Joy':3, 'Neutral':4, 'Sad':5}
emo = list(emotions.keys())

with open('speech_emotion_classifier.pkl','rb') as f:
    loaded = pickle.load(f)
    pred = loaded.predict(train_x[3456].reshape((1,164)))
    print(emo[int( np.where( pred == pred.max() )[1] )])